# coding=utf-8
import akshare as ak
# import abc as ak
import os
import util
import pandas as pd
from data_source import DataSource

china_market_list = ["CFFEX", "INE", "CZCE", "DCE", "SHFE", "GFEX"]

# generated by: generate_name_to_symbol_dict
name_to_symbol = {
         "PTA" : "TA",
         "菜油" : "OI",
         "菜籽" : "RS",
         "菜粕" : "RM",
         "动力煤" : "ZC",
         "强麦" : "WH",
         "粳稻" : "JR",
         "白糖" : "SR",
         "棉花" : "CF",
         "早籼稻" : "RI",
         "郑醇" : "MA",
         "玻璃" : "FG",
         "晚籼稻" : "LR",
         "硅铁" : "SF",
         "锰硅" : "SM",
         "棉纱" : "CY",
         "鲜苹果" : "AP",
         "红枣" : "CJ",
         "尿素" : "UR",
         "纯碱" : "SA",
         "短纤" : "PF",
         "花生" : "PK",
         "烧碱" : "SH",
         "二甲苯" : "PX",
         "PVC" : "V",
         "棕榈" : "P",
         "豆二" : "B",
         "豆粕" : "M",
         "铁矿石" : "I",
         "鸡蛋" : "JD",
         "塑料" : "L",
         "PP" : "PP",
         "纤维板" : "FB",
         "胶合板" : "BB",
         "豆油" : "Y",
         "玉米" : "C",
         "豆一" : "A",
         "焦炭" : "J",
         "焦煤" : "JM",
         "玉米淀粉" : "CS",
         "乙二醇" : "EG",
         "粳米" : "RR",
         "苯乙烯" : "EB",
         "液化石油气" : "PG",
         "生猪" : "LH",
         "燃油" : "FU",
         "原油" : "SC",
         "沪铝" : "AL",
         "橡胶" : "RU",
         "沪锌" : "ZN",
         "沪铜" : "CU",
         "黄金" : "AU",
         "螺纹钢" : "RB",
         "线材" : "WR",
         "沪铅" : "PB",
         "白银" : "AG",
         "沥青" : "BU",
         "热轧卷板" : "HC",
         "沪锡" : "SN",
         "沪镍" : "NI",
         "纸浆" : "SP",
         "20号胶" : "NR",
         "不锈钢" : "SS",
         "低硫燃料油" : "LU",
         "国际铜" : "BC",
         "氧化铝" : "AO",
         "丁二烯橡胶" : "BR",
         "集运指数(欧线)期货" : "EC",
         "沪深300指数期货" : "IF",
         "5年期国债期货" : "TF",
         "10年期国债期货" : "T",
         "上证50指数期货" : "IH",
         "中证500指数期货" : "IC",
         "2年期国债期货" : "TS",
         "中证1000股指期货" : "IM",
         "工业硅" : "SI",
         "碳酸锂" : "LC",
}

symbol_to_name = {value: key for key, value in name_to_symbol.items()}


def generate_name_to_symbol_dict():
    names = ak.futures_symbol_mark()['symbol']
    symbols = []
    for name in names:
        try:
            futures_zh_realtime_df = ak.futures_zh_realtime(symbol=name)
            symbol = futures_zh_realtime_df.iloc[0]['symbol']
            import re
            symbol = re.sub(r'[^A-Za-z]', '', symbol)
            symbols.append(symbol)
        except:
            symbols.append('UNKONWN')
            print(f"error getting {name}")
    content = ''
    content += "name_to_symbol = {\n"
    for name, symbol in zip(names, symbols):
        content += f"\t \"{name}\" : \"{symbol}\",\n"
    content += "}\n"
    return content


class DataSourceAkshare(DataSource):
    def __init__(self):
        super().__init__()


    def download_single_contract(self, symbol, contract_date):
        # 把 202409 转成 2409
        try:
            df = ak.futures_zh_daily_sina(symbol=f"{symbol}{str(contract_date)[2:]}")
        except Exception as ex:
            print(f"download single contract {symbol}{contract_date} failed, exception: {str(ex)}")
            return None

        df = df[['date', 'open', 'high', 'low', 'close', 'volume']]
        df.columns = ['Date', 'Open', 'High', 'Low', 'Close', 'Volume']
        df['Date'] = pd.to_datetime(df['Date'], format="%Y-%m-%d")
        df.index = df["Date"]
        return df

    def download_all_single_contracts(self, symbol_list):
        # self.download_raw_contract_data()
        df_single_contract_dict = self.build_all_single_contracts_from_raw_data(symbol_list)
        return df_single_contract_dict
    
    def _download_raw_contract_data(self, market, start_date, end_date):
        save_path = os.path.join(self.temp_data_dir, f"{market}_{start_date}_{end_date}.csv")
        if not os.path.exists(save_path):
            try:
                import time
                time.sleep(10)
                daily_df = ak.get_futures_daily(start_date=start_date, end_date=end_date, market=market)
                daily_df.to_csv(save_path, index=False)
            except Exception as es:
                print(f"failed to get {market}, {start_date}, {end_date}, {str(es)}")


    def download_raw_contract_data(self):
        year_list = range(2017, 2025)
        china_market_list = ['DCE']
        for market in china_market_list:
            if market == 'DCE':
                month_list = range(1, 13)
                for year in year_list:
                    for month in month_list:
                        start_date = f"{year}{month:02d}01"
                        if month == 12:
                            end_date = f"{year}{month:02d}31"
                        else:
                            end_date = f"{year}{month+1:02d}01"
                        print(f"getting {market}, {start_date}, {end_date}")
                        self._download_raw_contract_data(market, start_date, end_date)

            else:
                for year in year_list:
                    start_date = f"{year}0101"
                    end_date = f"{year + 1}0101"
                    print(f"getting {market}, {start_date}, {end_date}")
                    self._download_raw_contract_data(market, start_date, end_date)

    def fix_symbol_errors_for_czce(self, df):
        def transform_symbol(row):
            symbol, three_digit_contract_date = row['symbol'][:-3], row['symbol'][-3:]
            price_date_year_month = str(row['date'])[0:6]
            prefix_list = ['201', '202']
            for prefix in prefix_list:
                if int(prefix + three_digit_contract_date) >= int(price_date_year_month):
                    four_digit_contract_date = f"{prefix[-1]}{three_digit_contract_date}"
                    return f"{symbol}{four_digit_contract_date}"
            print('we are fucked')

        df['symbol'] = df.apply(transform_symbol, axis=1)
        return df
    
    def fix_symbol_errors_for_dce(self, df):
        df['symbol'] = df['symbol'].str.upper()
        return df

    def build_all_single_contracts_from_raw_data(self, symbol_list):
        df_single_contract_dict = {}
        for market in china_market_list:
            print(f"getting {market} ...")
            df_list = []
            for filename in os.listdir(self.temp_data_dir):
                if filename.startswith(market):
                    filepath = os.path.join(self.temp_data_dir, filename)
                    df = pd.read_csv(filepath)
                    if market == 'CZCE':
                        df = self.fix_symbol_errors_for_czce(df)
                    if market == 'DCE':
                        df = self.fix_symbol_errors_for_dce(df)
                    df_list.append(df)
            df_all = pd.concat(df_list)
            contracts = set(df_all['symbol'])
            for contract in contracts:
                df = df_all[df_all['symbol'] == contract]
                df = df[['date', 'open', 'high', 'low', 'close', 'volume']]
                df.columns = ['Date', 'Open', 'High', 'Low', 'Close', 'Volume']
                df['Date'] = pd.to_datetime(df['Date'], format='%Y%m%d')
                df = df.sort_values(by='Date')
                symbol, contract_date = contract[:-4], '20' + str(contract[-4:])
                if symbol not in symbol_list:
                    continue
                print(f"getting {symbol} {contract_date}, raw contract name {contract}")
                df_single_contract_dict[(symbol, contract_date)] = df
        return df_single_contract_dict
    
    def get_active_contract_dates(self, symbol):
        name = symbol_to_name[symbol]
        df = ak.futures_zh_realtime(symbol=name)
        contract_date_list = list(df['symbol'])
        contract_date_list = [contract.replace(symbol, "") for contract in contract_date_list]
        if '0' in contract_date_list:
            contract_date_list.remove('0')
        contract_date_list = [f'20{contract_date}' for contract_date in contract_date_list]
        return contract_date_list

if __name__ == "__main__":
    print(generate_name_to_symbol_dict())
